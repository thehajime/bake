<configuration>
  <modules>

    <module name="dce-ns3">
      <source type="mercurial">
	<attribute name="url" value="http://code.nsnam.org/ns-3-dce"/>
 	<attribute name="module_directory" value="dce"/>
      </source>
       <depends_on name="ns-3-dev-dce" optional="False"/>
       <depends_on name="elf-loader" optional="False"/>
       <depends_on name="iperf" optional="True"/>
       <depends_on name="ccnx" optional="True"/>
       <depends_on name="wget" optional="True"/>
       <depends_on name="thttpd" optional="True"/>
      <build type="waf" objdir="build">
	<attribute name="configure_arguments" value="configure --with-ns3=$INSTALLDIR --with-elf-loader=$INSTALLDIR/lib --prefix=$INSTALLDIR"/>
	<!-- attribute name="post_installation" value="cd $SRCDIR; ./test.py" -->
     </build>
    </module>

    <module name="dce-linux">
      <source type="mercurial">
	<attribute name="url" value="http://code.nsnam.org/ns-3-dce"/>
 	<attribute name="module_directory" value="dce"/>
     </source>
       <depends_on name="elf-loader" optional="False"/>
       <depends_on name="ns-3-linux" optional="False"/>
       <depends_on name="iproute" optional="False"/>
       <depends_on name="iperf" optional="True"/>
       <depends_on name="ccnx" optional="True"/>
       <depends_on name="wget" optional="True"/>
       <depends_on name="thttpd" optional="True"/>
       <depends_on name="ns-3-dev-dce" optional="False"/>
      <build type="waf" objdir="yes" sourcedir="dce">
	<attribute name="configure_arguments" value="configure --prefix=$INSTALLDIR --with-ns3=$INSTALLDIR --with-elf-loader=$INSTALLDIR/lib --enable-kernel-stack=$SRCDIR/../ns-3-linux"/>
	<!-- attribute name="post_installation" value="cd $SRCDIR; ./test.py"/ -->
      </build>
    </module>

    <module name="ccnx">
      <source type="archive">
	<attribute name="url" value="http://www.ccnx.org/releases/ccnx-0.6.2.tar.gz"/>
	<attribute name="extract_directory" value="ccnx-0.6.2"/>
      </source>
      <build type="make" objdir="yes">
	<attribute name="pre_installation" value="cd $SRCDIR;INSTALL_BASE=$INSTALLDIR ./configure;mkdir $INSTALLDIR/include;mkdir $INSTALLDIR/lib;mkdir $INSTALLDIR/bin"/>
	<attribute name="build_arguments" value="MORE_LDLIBS=-pie"/>
        <attribute name="new_variable" value="INSTALL_BASE=$INSTALLDIR" />
      </build>
     </module>

    <module name="iperf">
      <source type="archive">
	<attribute name="url" value="http://iperf.fr/download/iperf_2.0.5/iperf-2.0.5-source.tar.gz"/>
	<attribute name="extract_directory" value="iperf-2.0.5"/>
      </source>
      <build type="make" objdir="yes">
	<attribute name="pre_installation" value="cd $SRCDIR;./configure --prefix=$INSTALLDIR"/>
	<attribute name="patch" value="$SRCDIR/../dce/utils/iperf_4_dce.patch"/>
      </build>
     </module>

     <module name="iproute">
      <source type="archive">
	<attribute name="url" value="http://www.linuxgrill.com/anonymous/iproute2/NEW-OSDL/iproute2-2.6.38.tar.bz2"/>
      </source>
      <build type="make" objdir="yes">
	<attribute name="pre_installation" value="$SRCDIR/configure"/>
	<attribute name="LDFLAGS" value="-pie"/>
	<attribute name="ignore_predefined_flags" value="True"/>
         <attribute name="install_arguments" value="DESTDIR=$INSTALLDIR" />
	<attribute name="build_arguments" value="CCOPTS+=-fpic CCOPTS+=-D_GNU_SOURCE CCOPTS+=-O0 CCOPTS+=-U_FORTIFY_SOURCE LDFLAGS=-pie"/>
      </build>
     </module>

    <module name="ns-3-dev-dce">
      <source type="mercurial">
	<attribute name="url" value="http://code.nsnam.org/ns-3-dev"/>
      </source>
      <build type="waf" objdir="yes">
	<attribute name="configure_arguments" value="configure --prefix=$INSTALLDIR --enable-tests"/>
      </build>
    </module>

    <module name="ns-3-linux" built_once="true">
      <source type="mercurial">
	<attribute name="url" value="http://code.nsnam.org/furbani/ns-3-linux"/>
      </source>
      <build type="make" objdir="no">
        <attribute name="install_arguments" value="INSTALL_DIR=$INSTALLDIR"/>
        <attribute name="post_installation" value="mkdir -p $INSTALLDIR/bin_dce; cd $INSTALLDIR/bin_dce; ln -s ../lib/libnet-next-2.6.so liblinux.so; ln -s ../lib/libnet-next-2.6.so"/>
      </build>
    </module>

     <module name="wget">
      <source type="archive">
    <attribute name="url" value="http://ftp.gnu.org/gnu/wget/wget-1.14.tar.gz"/>
    <attribute name="extract_directory" value="wget-1.14"/>
      </source>
      <build type="make" objdir="yes">
    <attribute name="pre_installation" value="cd $SRCDIR; CFLAGS=-fPIC LDFLAGS=-pie ./configure --disable-opie  --disable-digest --disable-ntlm  --disable-largefile
 --disable-threads --disable-nls  --disable-rpath  --disable-iri --without-ssl --without-zlib  --without-libiconv-prefix --without-libintl-prefix --without-libpth-prefi
x  --without-included-regex --prefix=$INSTALLDIR"/>
      </build>
     </module>

    <module name="thttpd">
      <source type="archive">
    <attribute name="url" value="http://www.acme.com/software/thttpd/thttpd-2.25b.tar.gz"/>
    <attribute name="extract_directory" value="thttpd-2.25b"/>
      </source>
      <build type="make" objdir="yes">
    <attribute name="pre_installation" value="cd $SRCDIR;./configure --prefix=$INSTALLDIR"/>
    <attribute name="patch" value="$SRCDIR/../dce/myscripts/httpd/dce-thttpd.patch"/>
         <attribute name="install_arguments" value="-n" />
    <attribute name="build_arguments" value="thttpd"/>
         <attribute name="post_installation" value="cd $SRCDIR; mkdir $INSTALLDIR/bin_dce; /bin/cp -f thttpd-2.25b/thttpd  $INSTALLDIR/bin_dce"/>
      </build>
     </module>


     <module name="iputils">
       <source type="archive">
	 <attribute name="url" value="http://www.skbuff.net/iputils/iputils-s20101006.tar.bz2"/>
       </source>
       <!-- note: iputils does not have 'make install' -->
       <build type="inline"  classname="IputilsModuleBuild">
	 <attribute name="supported_os" value="linux;linux2"/>
	 <code>class IputilsModuleBuild(InlineModuleBuild):
    def __init__(self):
        InlineModuleBuild.__init__(self)
    def build(self, env, jobs):
           env.run(['patch', '-p1', '-f', '-i', env.srcdir + '/../dce/myscripts/ns-3-dce-quagga/utils/iputils-ping6.patch'],
           directory=env.srcdir)
           env.run(['make', 'CFLAGS=-fpic', 'CFLAGS+=-D_GNU_SOURCE', 'CFLAGS+=-g',
           'CFLAGS+=-Wstrict-prototypes', 'CFLAGS+=-Wall', 'LDFLAGS=-pie', 
           'ping', 'ping6', '-j', str(jobs)],
           directory=env.srcdir)
           env.run(['mkdir', '-p' , env.installdir + '/bin_dce/'],
           directory=env.srcdir)
           env.run(['cp', 'ping', 'ping6', env.installdir + '/bin_dce'],
           directory=env.srcdir)
    def clean(self, env):
           env.run(['make', 'clean'], directory=env.srcdir)
    def check_version(self, env):
           return True</code>
       </build>
     </module>

     <!-- umip related modules -->
     <module name="dce-umip">
       <source type="mercurial">
	 <attribute name="url" value="http://code.nsnam.org/thehajime/ns-3-dce-umip"/>
	 <attribute name="module_directory" value="dce/myscripts/ns-3-dce-umip/"/>
       </source>
       <depends_on name="dce-linux" optional="False"/>
       <depends_on name="dce-quagga" optional="False"/>
       <depends_on name="umip" optional="False"/>
       <build type="none">
	 <!-- attribute name="configure_arguments" value="configure -prefix=$INSTALLDIR"/ -->
       </build>
     </module>

     <module name="umip">
       <source type="git">
         <attribute name="url" value="git://git.umip.org/umip.git"/>
       </source>
       <build type="autotools" objdir="no">
         <attribute name="maintainer" value="yes" />
         <attribute name="configure_arguments" value="./configure CFLAGS=-fPIC  LDFLAGS=-pie --prefix=$INSTALLDIR --enable-vt --with-builtin-crypto"/>
         <attribute name="install_arguments" value="-n" />
         <attribute name="post_installation" value="cd $SRCDIR; mkdir $INSTALLDIR/bin_dce; /bin/cp -f src/mip6d  $INSTALLDIR/bin_dce"/>
       </build>
     </module>

    <!-- quagga related modules -->
    <module name="dce-quagga">
      <source type="mercurial">
	<attribute name="url" value="http://code.nsnam.org/thehajime/ns-3-dce-quagga"/>
 	<attribute name="module_directory" value="dce/myscripts/ns-3-dce-quagga/"/>
      </source>
       <depends_on name="dce-linux" optional="False"/>
       <depends_on name="quagga" optional="False"/>
       <depends_on name="iputils" optional="False"/>
      <build type="none">
	<!-- attribute name="configure_arguments" value="configure -prefix=$INSTALLDIR"/ -->
     </build>
    </module>

     <module name="quagga">
       <source type="archive">
	<!-- some of mirror sever of gnu.org isn't available.. -->
	<!-- attribute name="url" value="http://download.savannah.gnu.org/releases/quagga/quagga-0.99.20.tar.gz"/ -->
	<attribute name="url" value="http://pkgs.fedoraproject.org/lookaside/pkgs/quagga/quagga-0.99.20.tar.gz/64cc29394eb8a4e24649d19dac868f64/quagga-0.99.20.tar.gz"/>
	<attribute name="extract_directory" value="quagga-0.99.20"/>
       </source>
       <build type="make" objdir="yes">
	 <attribute name="pre_installation" value="cd $SRCDIR; CFLAGS='-fPIC -g' LDFLAGS=-pie ./configure --disable-shared --enable-static --disable-user --disable-group --disable-capabilities --prefix=$INSTALLDIR"/>
         <attribute name="install_arguments" value="-n" />
         <attribute name="post_installation" value="cd $SRCDIR; mkdir $INSTALLDIR/bin_dce; /bin/cp zebra/zebra $INSTALLDIR/bin_dce;/bin/cp ripd/ripd $INSTALLDIR/bin_dce;/bin/cp ripngd/ripngd $INSTALLDIR/bin_dce;/bin/cp ospfd/ospfd $INSTALLDIR/bin_dce;/bin/cp ospf6d/ospf6d $INSTALLDIR/bin_dce;/bin/cp bgpd/bgpd $INSTALLDIR/bin_dce"/>
       </build>
     </module>

    <module name="click">
      <source type="git">
	<attribute name="url" value="git://read.cs.ucla.edu/git/click"/>
	<attribute name="revision" value="724412626833df5c13384be5cce4da52c601371f"/>

      </source>
      <build type="autotools" objdir="yes">
	<attribute name="configure_arguments" value="../configure --prefix=$INSTALLDIR --exec-prefix=$INSTALLDIR -enable-userlevel --disable-linuxmodule --enable-nsclick --enable-wifi"/>
	<attribute name="post_installation" value="mkdir $INSTALLDIR/lib; cp -r $OBJDIR/include $INSTALLDIR/lib/."/> 
      </build>
    </module>

    <module name="libxml2-dev">
      <source type="system_dependency">
	<attribute name="dependency_test" value="xmlIO.h"/>
	<attribute name="try_to_install" value="True"/>
	<attribute name="name_yum" value="libxml2-devel"/>
	<attribute name="name_yast" value="libxml2-devel"/>
	<attribute name="name_apt-get" value="libxml2-dev"/>
	<attribute name="more_information" value="Didn't find the libxml2-dev library, try to install it!"/>
      </source>
      <build type="none" objdir="no">
      </build>
    </module>

    <module name="openflow-ns3">
      <source type="mercurial">
	<attribute name="url" value="http://code.nsnam.org/jpelkey3/openflow"/>
      </source>
      <build type="waf" objdir="yes">
	<attribute name="configure_arguments" value="configure --prefix=$INSTALLDIR"/>
      </build>
	<depends_on name="libxml2-dev" optional="False"/>
    </module>

    <module name="gccxml-ns3">
      <source type="cvs">
	<attribute name="root" value=":pserver:anoncvs:@www.gccxml.org:/cvsroot/GCC_XML"/>
	<attribute name="module" value="gccxml"/>
	<attribute name="date" value="2009-09-21"/>
      </source>
      <build type="cmake" objdir="yes">
      </build>
    </module>

    <module name="pygccxml">
      <source type="archive">
	<attribute name="url" value="http://downloads.sourceforge.net/project/pygccxml/pygccxml/pygccxml-1.0/pygccxml-1.0.0.zip"/>
      </source>
      <build type="python" objdir="yes">
      </build>
      <depends_on name="gccxml-ns3" optional="True"/>
    </module>

    <module name="pybindgen">
      <source type="bazaar">
	<attribute name="url" value="https://launchpad.net/pybindgen"/>
	<attribute name="revision" value="revno:809"/>
      </source>
      <build type="waf" objdir="yes">
	<attribute name="configure_arguments" value="configure --prefix=$INSTALLDIR"/>
	<attribute name="build_arguments" value="--generate-version"/>
      </build>
      <depends_on name="pygccxml" optional="True"/>
      <depends_on name="gccxml-ns3" optional="False"/>
    </module>


    <module name="nsc">
      <source type="mercurial">
	<attribute name="url" value="https://secure.wand.net.nz/mercurial/nsc"/>
      </source>
      <!-- problem: scons has no generic command-line support for builddir and installdir -->
      <build type="inline"  classname="NscModuleBuild">
	<attribute name="supported_os" value="linux;linux2"/>
	<code>class NscModuleBuild(InlineModuleBuild):
    def __init__(self):
        InlineModuleBuild.__init__(self)
    def build(self, env, jobs):
        import os
        import shutil

        env.run(['python', os.path.join(env.srcdir, 'scons.py'), 
                 '-j', str(jobs), 'prefix=' + env.installdir, 'install'],
                directory=env.srcdir )
        srcLib = os.path.join(env.srcdir, 'lib')
        files = os.listdir(srcLib)
        destination = os.path.join(env.installdir, 'lib')
        for file in files:
             try:
                 shutil.copy2(os.path.join(srcLib, file), destination)
             except Exception as e:
                 print ("   > Error executing copy : " + str(e) + "\n")
       
    def clean(self, env):
        env.run(['python', os.path.join(env.srcdir, 'scons.py'), '-c'],
                directory=env.srcdir)
    def check_version(self, env):
        return True</code>
      </build>
    </module>
    

    <module name="qt4">
      <source type="system_dependency">
	<attribute name="dependency_test" value="(qmake or qmake-qt4)"/>
	<attribute name="try_to_install" value="True"/>
	<attribute name="name_yum" value="qt4-devel"/>
	<attribute name="name_apt-get" value="qt4-dev-tools"/>
	<attribute name="more_information" value="Didn't find QT 4, download and install it from http://qt.nokia.com/downloads/"/>
      </source>
      <build type="none" objdir="no">
      </build>
    </module>

    <module name="elf-loader">
      <source type="mercurial">
	<attribute name="url" value="http://code.nsnam.org/mathieu/elf-loader"/>
      </source>
      <build type="make" objdir="no">
	<attribute name="configure_arguments" value="vdl-config.h"/>
	<attribute name="install_arguments" value="PREFIX=$INSTALLDIR"/>
      </build>
    </module>

    <module name="netanim">
      <source type="mercurial">
	<attribute name="url" value="http://code.nsnam.org/netanim"/>
      </source>
      <build type="make" objdir="no">
	<attribute name="pre_installation" value="cd $SRCDIR;qmake NetAnim.pro or cd $SRCDIR;qmake-qt4 NetAnim.pro or cd $SRCDIR;qmake -spec macx-g++ NetAnim.pro"/>
      </build>
      <depends_on name="qt4" optional="False"/>
    </module>

  <module name="ns-3-allinone">
      <source type="mercurial">
	<attribute name="url" value="http://code.nsnam.org/ns-3-dev"/>
      </source>
      <depends_on name="netanim" optional="True"/>
      <depends_on name="nsc" optional="True"/>
      <depends_on name="pybindgen" optional="True"/>
      <depends_on name="click" optional="True"/>
      <depends_on name="openflow-ns3" optional="True"/>
      <build type="waf" objdir="yes">
	<attribute name="configure_arguments" value="configure --prefix=$INSTALLDIR --enable-examples --enable-tests --with-nsclick=$SRCDIR/click --with-pybindgen=$SRCDIR/pybindgen --with-openflow=$SRCDIR/openflow-ns3 --with-nsc=$SRCDIR/nsc"/>
      </build>
  </module>

  <module name="ns-3-dev">
      <source type="mercurial">
	<attribute name="url" value="http://code.nsnam.org/ns-3-dev"/>
      </source>
      <build type="waf" objdir="yes">
	<attribute name="configure_arguments" value="configure --prefix=$INSTALLDIR --enable-examples --enable-tests"/>
      </build>
  </module>


  <module name="test1">
      <source type="mercurial">
	<attribute name="url" value="http://code.nsnam.org/bake"/>
      </source>
      <build type="waf" objdir="yes">
	<attribute name="configure_arguments" value="configure --prefix=$INSTALLDIR --enable-examples --enable-tests"/>
      </build>
  </module>

    <module name="test2">
      <source type="bazaar">
	<attribute name="url" value="https://launchpad.net/pybindgen"/>
	<attribute name="revision" value="revno:809"/>
      </source>
      <build type="waf" objdir="yes">
	<attribute name="configure_arguments" value="configure --prefix=$INSTALLDIR"/>
	<attribute name="build_arguments" value="--generate-version"/>
      </build>
      <depends_on name="test1" optional="False"/>
    </module>

    <module name="test3">
      <source type="bazaar">
	<attribute name="url" value="https://launchpad.net/pybindgen"/>
	<attribute name="revision" value="revno:809"/>
      </source>
      <build type="waf" objdir="yes">
	<attribute name="configure_arguments" value="configure --prefix=$INSTALLDIR"/>
	<attribute name="build_arguments" value="--generate-version"/>
      </build>
      <depends_on name="test2" optional="True"/>
      <depends_on name="pygccxml" optional="True"/>
    </module>


<!--
  <module name="ns-3-16">
      <source type="mercurial">
	<attribute name="url" value="http://code.nsnam.org/ns-3.16"/>
      </source>
      <depends_on name="netanim" optional="True"/>
      <depends_on name="nsc" optional="True"/>
      <depends_on name="pybindgen" optional="True"/>
      <depends_on name="click" optional="True"/>
      <depends_on name="openflow-ns3" optional="True"/>
      <build type="waf" objdir="yes">
	<attribute name="configure_arguments" value="configure \-\-prefix=$INSTALLDIR \-\-enable-examples \-\-enable-tests \-\-with-nsclick=$SRCDIR/click \-\-with-pybindgen=$SRCDIR/pybindgen \-\-with-openflow=$SRCDIR/openflow-ns3 \-\-with-nsc=$SRCDIR/nsc"/>
      </build>
  </module>
-->

  </modules>

  <predefined name="dbg">
    <append name="CFLAGS" value="-g"/>
    <append name="CXXFLAGS" value="-g"/>
    <configuration objdir="dbg"/>
    <configuration installdir="build_dbg"/>
  </predefined>

  <predefined name="opt">
    <configuration objdir="opt"/>
    <configuration installdir="build_opt"/>
<!--   <append name="configure_arguments" value=" -d optimized"/> -->
    <append name="CFLAGS" value="-O3"/>
    <append name="CXXFLAGS" value="-O3"/>
  </predefined>
  
  <predefined name="ns3">
    <enable name="ns-3-dev"/>
    <!--    <configuration installdir="." sourcedir="../source"/> -->
    <append module="ns-3-dev" name="configure_arguments" value="--enable-examples --enable-tests"/>
  </predefined>

  <predefined name="ns3-min">
    <enable name="ns-3-dev"/>
    <append module="ns-3-dev" name="configure_arguments" value=" --enable-modules=core,network,wifi"/> -->
  </predefined>

</configuration>
